{"remainingRequest":"D:\\tmquy\\MISA.Amis\\MISA.Amis.View\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\tmquy\\MISA.Amis\\MISA.Amis.View\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\tmquy\\MISA.Amis\\MISA.Amis.View\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\tmquy\\MISA.Amis\\MISA.Amis.View\\src\\views\\employee\\EmployeeDetail.vue?vue&type=template&id=3f830dd4&","dependencies":[{"path":"D:\\tmquy\\MISA.Amis\\MISA.Amis.View\\src\\views\\employee\\EmployeeDetail.vue","mtime":1620791305715},{"path":"D:\\tmquy\\MISA.Amis\\MISA.Amis.View\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1620785079948},{"path":"D:\\tmquy\\MISA.Amis\\MISA.Amis.View\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1620785088685},{"path":"D:\\tmquy\\MISA.Amis\\MISA.Amis.View\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1620785079948},{"path":"D:\\tmquy\\MISA.Amis\\MISA.Amis.View\\node_modules\\vue-loader\\lib\\index.js","mtime":1620785088684}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}