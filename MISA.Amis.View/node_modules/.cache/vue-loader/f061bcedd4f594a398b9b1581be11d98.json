{"remainingRequest":"D:\\tmquy\\MISA.Amis\\MISA.Amis.View\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\tmquy\\MISA.Amis\\MISA.Amis.View\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\tmquy\\MISA.Amis\\MISA.Amis.View\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\tmquy\\MISA.Amis\\MISA.Amis.View\\src\\views\\employee\\EmployeeList.vue?vue&type=template&id=54bc2bba&","dependencies":[{"path":"D:\\tmquy\\MISA.Amis\\MISA.Amis.View\\src\\views\\employee\\EmployeeList.vue","mtime":1620784117303},{"path":"D:\\tmquy\\MISA.Amis\\MISA.Amis.View\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1620784107351},{"path":"D:\\tmquy\\MISA.Amis\\MISA.Amis.View\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1620784116582},{"path":"D:\\tmquy\\MISA.Amis\\MISA.Amis.View\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1620784107351},{"path":"D:\\tmquy\\MISA.Amis\\MISA.Amis.View\\node_modules\\vue-loader\\lib\\index.js","mtime":1620784116580}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}